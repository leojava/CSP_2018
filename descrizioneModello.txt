
PROBLEMA:
minimizzazione dello spazio sprecato su N texture atlas per un set di immagini



NOTAZIONI:
immagine: risorsa base
texture: immagine "grande" in cui posizionare le risorse base
"su a in B": operazione eseguita su/per ogni elemento a appartenente a B
"su a": operazione eseguita su/per ogni elemento a (l'insieme B è sottinteso)
IxI: prodotto cartesiano di I per I



PARAMETRI
I: set delle immagini i
IW: set delle lunghezze i
IH: set delle altezze i
M=|I| cardinalità di I
alfa, beta : parametri dell f.obiettivo

T: set delle texture t

SU = SOMMA su i in I ( IW[i] * IH[i] )    è lo spazio utilizzato da tutte le immagini



VARIABILI
	(se dimensioni multiple di 2, i domini di TW e TH sono ridotti a 2**i (fino all'i più piccolo, ma sufficientemente grande))
TW: set delle lunghezze delle texture t
TH: set delle altezze delle texture t

IT: set che mappa l'immagine i alla texture t
IX: ascissa dell'immagine i sulla texture IT[i]
IY: coordinata dell'immagine i sulla texture IT[i]



F.OBIETTIVO    (quindi COP)
minimizzazione f = alfa * L + beta * N                     alfa e beta sono dei pesi (da 0 a 10000)
														# tendono a crescere sia L che N, quindi va bene il vincolo e sarà sempre >=0


VINCOLI
L = ST - SU		spazio libero: totale - utilizzato (semre >=0)
ST = SOMMA su t in T di ( TW[t]*TH[t] )      è lo spazio disponibile delle texture (quelle non usate sono 0*0)

N = max su i (IT[i]) +1                      è il numero di texture utilizzate
è sempre N<=M (1 texture per immagine se N==M)

per ogni i,j in IxI, i<j   (i==j sarà sempre falso, mentre i>j è una ripetizione (simmetria di variabili))
    // se stessa t, deve esistere un asse su cui i non si sorappone con j: vincolo di non sovrapposizione tra le due immagini 
    IT[i]==IT[j] =>  ( (IX[i]+IW[i] < IX[j] || IX[j]+IW[j] < IX[i] ) || (IY[i]+IH[i] < IY[j] || IY[j]+IH[j] < IY[i] ) )

per ogni t in T                            #t.c. IT[i]=t
	TW[t] = max su i ( (t==IT[i])*(IX([i] + IW[i])))      larghezza			/!\
	TH[t] = max su i ( (t==IT[i])*(IY([i] + IH[i])))      altezza			/!\
	(se texture quadrate :)
		[aggiungi vincolo] TW[t]=TH[t]


2) possibilità di utilizzare solo multipli di 2 per le dimensioni delle texture
3) possibilità di avere texture di dimensioni identiche o quadrate


FUNZIONALITÀ AGGIUNTIVE
volendo il modello si può espandere con delle funzionalità opzionali

1) possiblità di ruotare le immagini di 90 gradi


simmetrie:
	(a) tra img X img : sul vincolo di non sovrapposizione, basta farlo per le sole i<j

	(1,2) simmetria "nella" texture: una soluzione può essere specchiata verticalmente e orizzontalmente
	nel romperla: si riduce a 1/4 l'insieme delle soluzioni (togliendo 3/4 di soluzioni "ridondanti")
	possible soluzione: imporre come prime (X e Y minori) le immagini di dimensione (area o lato?) maggiore 
		problema: come dimostrarne la validità? potrebbe togliere possibli soluzioni?
		( (SE andasse bene:)  per ogni i,j in I,i<j: IT[i]=IT[j] => ( IW[j]*IH[i]> IW[j]*IH[j] =>  (IX[i]<=IX[j] ^ IX[i]<=IY[j])) )
		(                                         stessa texture => (   area maggiore          =>         NON viene dopo) )       

	(3) tra texture: essendo semplici indici, trovata una soluzione, per 2 texture t,s basta scambiare tutte le IT[]=t con quelle IT[]=s per avere una soluzione equivalente;
	nel romperla: si riduce a 1/(N!) l'elenco delle soluzioni (N è il numero di texture utilizzate) (togliendo quindi (N!-1)/(N!) soluzioni "ridondanti!" )
	soluzione (come implementarla?): per ogni immagine i, per ogni textures t,s, t<s: se in entrambe c'è un rettangolo libero per posizionare i, allora IT[i]!=s (: non si usa l'ultima, va bene in caso ci sia spazio su più di 2 texture)

	(4 (e forse 5)) tra immagini simili (uguali): se hanno width e heigth uguali, basta scambiarle di posto per avere una soluzione identica;
	soluzione: le immagini uguali seguono l'ordine dei propri indici
	(miglioria (?): basta farlo sulle singole dimensioni o sull'intera tupla?)

